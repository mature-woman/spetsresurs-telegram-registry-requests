<?php

// –§—Ä–µ–π–º–≤–æ—Ä–∫ ArangoDB
use mirzaev\arangodb\connection,
	mirzaev\arangodb\collection,
	mirzaev\arangodb\document;

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è ArangoDB
use ArangoDBClient\Document as _document,
	ArangoDBClient\Cursor,
	ArangoDBClient\Statement as _statement;

// –§—Ä–µ–π–º–≤–æ—Ä–∫ Telegram
use Zanzara\Zanzara;
use Zanzara\Context;
use Zanzara\Config;

require __DIR__ . '/../../../../../../../vendor/autoload.php';

$arangodb = new connection(require __DIR__ . '/../settings/arangodb.php');

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 *
 * @param string $id –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram
 *
 * @return _document|null|false (–∏–Ω—Å—Ç–∞–Ω—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω; null, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω; false, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
 */
function authorization(string $id): _document|null|false
{
	global $arangodb;

	if (collection::init($arangodb->session, 'telegram')) {
		if ($telegram = collection::search($arangodb->session, sprintf("FOR d IN telegram FILTER d.id == '%s' RETURN d", $id))) {
			if ($telegram->number === null) return null;
			else if (
				$telegram->active
				&& collection::init($arangodb->session, 'account')
				&& $account = collection::search(
					$arangodb->session,
					sprintf(
						"FOR d IN account FILTER d.number == '%s' RETURN d",
						$telegram->number,
						$telegram->getId()
					)
				)
			) return $account;
			else return false;
		}
	} else throw new exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é');

	return false;
}

/**
 * –°–æ—Ç—Ä—É–¥–Ω–∏–∫
 *
 * @param string $id –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
 *
 * @return _document|null|false (–∏–Ω—Å—Ç–∞–Ω—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω; null, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω; false, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
 */
function worker(string $id): _document|null|false
{
	global $arangodb;

	return collection::search(
		$arangodb->session,
		sprintf(
			<<<'AQL'
				FOR d IN worker
					LET e = (
						FOR e IN account_edge_worker
							FILTER e._from == '%s'
							SORT e.created DESC, e._key DESC
							LIMIT 1
							RETURN e
					)
					FILTER d._id == e[0]._to && d.active == true
					SORT d.created DESC, d._key DESC
					LIMIT 1
					RETURN d
			AQL,
			$id
		)
	);
}

function registration(string $id, string $number): bool
{
	global $arangodb;

	if (collection::init($arangodb->session, 'telegram')) {
		if ($telegram = collection::search($arangodb->session, sprintf("FOR d IN telegram FILTER d.id == '%s' RETURN d", $id))) {
			// –ù–∞–π–¥–µ–Ω –∞–∫–∫–∞—É–Ω—Ç

			// –ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–∞
			$telegram->number = $number;
			if (!document::update($arangodb->session, $telegram)) return false;
		} else if (
			$number === null
			|| !$telegram = collection::search(
				$arangodb->session,
				sprintf(
					"FOR d IN telegram FILTER d._id == '%s' RETURN d",
					document::write($arangodb->session,	'telegram', ['id' => $id, 'active' => false, 'number' => $number])
				)
			)
		) return false;

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–±—Ä–∞: account -> telegram
		if (
			collection::init($arangodb->session, 'account')
			&& ($account = collection::search(
				$arangodb->session,
				sprintf(
					"FOR d IN account FILTER d.number == '%d' RETURN d",
					$telegram->number
				)
			))
			&& collection::init($arangodb->session, 'connection', true)
			&& (collection::search(
				$arangodb->session,
				sprintf(
					"FOR d IN connection FILTER d._from == '%s' && d._to == '%s' RETURN d",
					$account->getId(),
					$telegram->getId()
				)
			)
				?? collection::search(
					$arangodb->session,
					sprintf(
						"FOR d IN connection FILTER d._id == '%s' RETURN d",
						document::write(
							$arangodb->session,
							'connection',
							['_from' => $account->getId(), '_to' => $telegram->getId()]
						)
					)
				))
		) {
			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–±—Ä–æ: account -> telegram

			// –ê–∫—Ç–∏–≤–∞—Ü–∏—è
			$telegram->active = true;
			return document::update($arangodb->session, $telegram);
		}
	} else throw new exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é');

	return false;
}

function generateAuthenticationKeyboard(): array
{
	return [
		'reply_markup' =>	[
			'keyboard' => [
				[
					['text' => 'üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', 'request_contact' => true]
				]
			],
			'resize_keyboard' => true
		]
	];
}

function generateMenu(Context $ctx): void
{
	if ($account = authorization($ctx->getMessage()?->getFrom()?->getId() ?? $ctx->getCallbackQuery()->getFrom()->getId())) {
		// –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è

		$ctx->sendMessage('üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ' . preg_replace('/([._\-()!#])/', '\\\$1', $account->name['first']), [
			'reply_markup' => [
				'inline_keyboard' => [
					[
						['text' => 'üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'callback_data' => 'search']
					]
				],
				'remove_keyboard' => true
			]
		]);
	}
}

function requests(int $amount = 5, int $page = 1): Cursor
{
	global $arangodb;

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	if ($page < 1) $page = 1;

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—ã—á–∏—Å–ª–Ω–∏–π
	--$page;

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–¥–≤–∏–≥–∞
	$offset = $page === 0 ? 0 : $page * $amount;

	return (new _statement(
		$arangodb->session,
		[
			'query' => sprintf(
				"FOR d IN task FILTER d.date >= %s && d.worker == null && d.confirmed != true && d.published == true && d.completed != true SORT d.created DESC, d._key DESC LIMIT %d, %d RETURN d",
				/* "FOR d IN task FILTER d.date >= %s && d.date <= %s && d.worker == null && d.confirmed != true && d.published == true && d.completed != true SORT d.created DESC, d._key DESC LIMIT %d, %d RETURN d", */
				(new DateTime('now'))->setTime(7, 0)->format('U'),
				/* (new DateTime('tomorrow'))->setTime(7, 0)->format('U'), */
				$offset,
				$amount + $offset
			),
			"batchSize" => 1000,
			"sanitize"	=> true
		]
	))->execute();
}

function generateEmojis(): string
{
	return '&#' . hexdec(trim(array_rand(file(__DIR__ . '/../emojis.txt')))) . ';';
}

function requests_next(Context $ctx): void
{
	$ctx->getChatDataItem('requests_page')->then(function ($page) use ($ctx) {
		$ctx->setChatDataItem('requests_page', ($page ?? 1) + 1)->then(function () use ($ctx) {
			search($ctx);
		});
	});
}

function requests_previous(Context $ctx): void
{
	$ctx->getChatDataItem('requests_page')->then(function ($page) use ($ctx) {
		$ctx->setChatDataItem('requests_page', ($page ?? 2) - 1)->then(function () use ($ctx) {
			search($ctx);
		});
	});
}

function request_choose(Context $ctx): void
{
	global $arangodb;

	if (($account = authorization($ctx->getCallbackQuery()->getFrom()->getId())) instanceof _document) {
		// –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ task –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		preg_match('/^#(\d+)\n/', $ctx->getCallbackQuery()->getMessage()->getText(), $matches);
		$_key = $matches[1];

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ task –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è)
		$task = collection::search($arangodb->session, sprintf("FOR d IN task FILTER d._key == '%s' && d.published == true && d.completed != true RETURN d", $_key));

		if ($worker = worker($account->getId())) {
			// –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫

			// –ó–∞–ø–∏—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
			$task->worker = $worker->getKey();

			// –°–Ω—è—Ç–∏–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
			$task->published = false;

			if (document::update($arangodb->session, $task)) {
				// –ó–∞–ø–∏—Å–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

				$ctx->sendMessage("‚úÖ *–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:* \#$_key", ['reply_markup' =>	['remove_keyboard' => true]])->then(function () use ($ctx) {
					generateMenu($ctx);
				});
			} else $ctx->sendMessage("‚ùé *–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É:* \#$_key", ['reply_markup' =>	['remove_keyboard' => true]])->then(function () use ($ctx) {
				generateMenu($ctx);
			});
		} else $ctx->sendMessage("‚ùé *–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É:* \#$_key", ['reply_markup' =>	['remove_keyboard' => true]])->then(function () use ($ctx) {
			generateMenu($ctx);
		});
	}
}

function search(Context $ctx): void
{
	global $arangodb;

	if (authorization($ctx->getMessage()?->getFrom()?->getId() ?? $ctx->getCallbackQuery()->getFrom()->getId()) instanceof _document) {
		// –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

		$ctx->getChatDataItem('requests_page')->then(function ($page) use ($ctx, $arangodb) {
			// –ù–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

			// –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			if (empty($page)) {
				$page = 1;
				$ctx->setChatDataItem('requests_page', 1);
			}

			// –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			$tasks = requests(6, $page);

			// –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			$count = $tasks->getCount();

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–±—ã—Ç–∫–∞
			$excess = $count % 6 === 0;

			// –û–±—Ä–µ–∑–∫–∞ –∑–∞—è–≤–æ–∫ –¥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			$tasks = array_slice($tasks->getAll(), 0, 5);

			if ($count === 0) $ctx->sendMessage('üì¶ *–ó–∞—è–≤–æ–∫ –Ω–µ—Ç*');
			else {
				// –ù–∞–π–¥–µ–Ω—ã –∑–∞—è–≤–∫–∏

				foreach ($tasks as $i => $task) {
					// –ü–µ—Ä–µ–±–æ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫

					if (($market = collection::search(
						$arangodb->session,
						sprintf(
							"FOR d IN market FILTER d._key == '%s' RETURN d",
							$task->market
						)
					)) instanceof _document) {
						// –ù–∞–π–¥–µ–Ω –º–∞–≥–∞–∑–∏–Ω	

						$ctx->getChatDataItem("request_$i")->then(function ($message) use ($ctx) {
							// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
							$ctx->deleteMessage($message->getChat()->getId(), $message->getMessageId());
						});

						// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–æ–¥–∑–∏
						/* $emoji = generateEmojis(); */

						// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
						$ctx->sendMessage(
							preg_replace(
								'/([._\-()!#])/',
								'\\\$1',
								"*#{$task->getKey()}*\n" . (new DateTime('@' . $task->date))->format('d.m.Y') . " (" . $task->start . " - " . $task->end . ")\n\n*–ì–æ—Ä–æ–¥:* $market->city\n*–ê–¥—Ä–µ—Å:* $market->address\n*–†–∞–±–æ—Ç–∞:* $task->work" . (mb_strlen($task->description) > 0 ? "\n\n$task->description" : '')
							),
							[
								'reply_markup' => [
									'inline_keyboard' => [
										[
											['text' => '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'callback_data' => 'request_choose']
										]
									]
								]
							]
						)->then(function ($message) use ($ctx, $tasks, $i, $page, $excess) {
							// –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–µ—à (–Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
							$ctx->setChatDataItem("request_$i", $message)->then(function () use ($ctx, $tasks, $i, $page, $excess) {

								if ($i === array_key_last($tasks)) {
									// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é 
									$ctx->getChatDataItem("request_menu")->then(function ($message) use ($ctx) {
										$ctx->deleteMessage($message->getChat()->getId(), $message->getMessageId());
									});

									// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞ –¥–ª—è –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
									$keyboard = [];

									// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏: "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
									if ($page > 1) $keyboard[] = ['text' => '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', 'callback_data' => 'requests_previous'];

									// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏: "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
									if ($excess) $keyboard[] = ['text' => '‚û°Ô∏è –í–ø–µ—Ä—ë–¥', 'callback_data' => 'requests_next'];

									// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
									$ctx->sendMessage('üîç –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É', [
										'reply_markup' => [
											'inline_keyboard' => [
												$keyboard
											]
										]
									])->then(function ($message) use ($ctx) {
										// –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–µ—à (–Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
										$ctx->setChatDataItem("request_menu", $message);
									});
								}
							});
						});
					}
				}
			}
		});
	}
}

$config = new Config();
$config->setParseMode(Config::PARSE_MODE_MARKDOWN);

$bot = new Zanzara(require(__DIR__ . '/../settings/key.php'), $config);

$stop = false;

$bot->onUpdate(function (Context $ctx) use (&$stop): void {
	$message = $ctx->getMessage();

	if (
		isset($message)
		&& ($contact = $message->getContact())
		&& $contact->getUserId() === $message->getFrom()->getId()
	) {
		// –ü–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π —à–∞–≥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)

		// –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		if (registration($contact->getUserId(), $contact->getPhoneNumber())) {
			// –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

			$ctx->sendMessage('‚úÖ *–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω*', ['reply_markup' =>	['remove_keyboard' => true]])->then(function () use ($ctx) {
				generateMenu($ctx);
			});

			$stop = true;
		} else $ctx->sendMessage('‚õî *–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã*', generateAuthenticationKeyboard());
	} else if ($message?->getText() !== 'üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' && !authorization($message?->getFrom()?->getId() ?? $ctx->getCallbackQuery()->getFrom()->getId())) {
		$ctx->sendMessage('‚õî *–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã*', generateAuthenticationKeyboard());

		$stop = true;
	}
});

$bot->onCommand('start', function (Context $ctx) use ($stop): void {
	if ($stop) return;
	generateMenu($ctx);
});

$bot->onCommand('search', fn ($ctx) => search($ctx));
$bot->onCbQueryData(['search'], fn ($ctx) => search($ctx));
$bot->onCbQueryData(['requests_next'], fn ($ctx) => requests_next($ctx));
$bot->onCbQueryData(['requests_previous'], fn ($ctx) => requests_previous($ctx));
$bot->onCbQueryData(['request_choose'], fn ($ctx) => request_choose($ctx));

$bot->run();
